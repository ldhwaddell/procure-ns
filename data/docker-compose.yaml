services:

  dwh:
    image: postgres:15
    container_name: dwh
    hostname: dwh
    ports:
      - 127.0.0.1:5432:5432
    volumes:
      - dwh:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DWH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DWH_POSTGRES_PASSWORD}
      POSTGRES_DB: ${DWH_POSTGRES_DB}
    networks:
      - dagster_network
    healthcheck:
      test: ['CMD-SHELL', "sh -c 'pg_isready -U ${DWH_POSTGRES_USER} -d ${DWH_POSTGRES_DB}'"]
      interval: 10s
      timeout: 8s
      retries: 5

  # ---------- Dagster Services ---------- 

  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  dagster_postgresql:
    image: postgres:11
    container_name: dagster_postgresql
    environment:
      POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
    networks:
      - dagster_network
    healthcheck:
      test: ['CMD-SHELL', "sh -c 'pg_isready -U ${DAGSTER_POSTGRES_USER} -d ${DAGSTER_POSTGRES_DB}'"]
      interval: 10s
      timeout: 8s
      retries: 5

  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
      # webserver.
  ingestion:
    image: ingestion
    build:
      context: ./ingestion
      dockerfile: Dockerfile
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
      DAGSTER_CURRENT_IMAGE: "ingestion"
      DWH_POSTGRES_USER: ${DWH_POSTGRES_USER}
      DWH_POSTGRES_PASSWORD: ${DWH_POSTGRES_PASSWORD}
      DWH_POSTGRES_DB: ${DWH_POSTGRES_DB}
      PROXY_USER: ${PROXY_USER}
      PROXY_PASSWORD: ${PROXY_PASSWORD}
    networks:
      - dagster_network
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'echo > /dev/tcp/localhost/4000'"]
      interval: 5s
      retries: 10
      start_period: 10s
    volumes:
      # - /opt/dagster/dagster_home:/tmp/dagster-data
      - /var/run/docker.sock:/var/run/docker.sock # can maybe be removed once dagster-docker installed
    depends_on:
      dwh:
        condition: service_healthy

  transformation:
    image: transformation
    build:
      context: ./transformation
      dockerfile: Dockerfile
      args:
        DWH_POSTGRES_USER: ${DWH_POSTGRES_USER}
        DWH_POSTGRES_PASSWORD: ${DWH_POSTGRES_PASSWORD}
        DWH_POSTGRES_DB: ${DWH_POSTGRES_DB}
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
      DAGSTER_CURRENT_IMAGE: "transformation"
      DWH_POSTGRES_USER: ${DWH_POSTGRES_USER}
      DWH_POSTGRES_PASSWORD: ${DWH_POSTGRES_PASSWORD}
      DWH_POSTGRES_DB: ${DWH_POSTGRES_DB}
    networks:
      - dagster_network
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'echo > /dev/tcp/localhost/4010'"]
      interval: 5s
      retries: 10
      start_period: 10s
    depends_on:
      dwh:
        condition: service_healthy

  duck_test:
    image: duck_test
    build:
      context: ./duck_test
      dockerfile: Dockerfile
    restart: always
    environment:
      DWH_DUCKDB: ${DWH_DUCKDB}
      DAGSTER_CURRENT_IMAGE: "duck_test"
      PROXY_USER: ${PROXY_USER}
      PROXY_PASSWORD: ${PROXY_PASSWORD}
    networks:
      - dagster_network
    volumes:
      - /tmp/procure-ns:/db
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      dagster_postgresql:
        condition: service_healthy


  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster_webserver:
    build:
      context: .
      dockerfile: ./Dockerfile
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: dagster_webserver
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
    volumes: # Make docker client accessible, so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster_network
    depends_on:
      dagster_postgresql:
        condition: service_healthy
      dwh:
        condition: service_healthy
      ingestion:
        condition: service_healthy
      transformation:
        condition: service_healthy

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    build:
      context: .
      dockerfile: ./Dockerfile
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
      DWH_POSTGRES_USER: ${DWH_POSTGRES_USER}
      DWH_POSTGRES_PASSWORD: ${DWH_POSTGRES_PASSWORD}
      DWH_POSTGRES_DB: ${DWH_POSTGRES_DB}
      DWH_DUCKDB: ${DWH_DUCKDB}
      PROXY_USER: ${PROXY_USER}
      PROXY_PASSWORD: ${PROXY_PASSWORD}
    volumes: # Make docker client accessible, so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - /tmp/procure-ns:/db
    networks:
      - dagster_network
    depends_on:
      dagster_postgresql:
        condition: service_healthy
      dwh:
        condition: service_healthy
      ingestion:
        condition: service_healthy
      transformation:
        condition: service_healthy

networks:
  dagster_network:
    driver: bridge
    name: dagster_network

volumes:
  dwh:
  postgres_volume:
    name: dagster_postgres_volume
